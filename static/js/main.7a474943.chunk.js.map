{"version":3,"sources":["components/start.js","components/qrcode.js","components/ct.js","App.js","serviceWorker.js","index.js"],"names":["Start","props","state","id","className","style","color","fontSize","fontFamily","width","window","innerWidth","to","Button","variant","size","React","Component","QrCode","pressed","sessionId","console","log","this","setState","loading","axios","post","then","res","data","_id","catch","err","localStorage","setItem","textAlign","value","bgColor","fgColor","marginTop","socket","openSocket","CopiedText","handleClick","open","handleClose","session","ct","bind","e","preventDefault","emit","getItem","returnValue","get","text","addEventListener","onUnload","on","a","removeEventListener","OverlayTrigger","trigger","placement","overlay","Popover","Content","backgroundColor","borderColor","slice","reverse","map","p","index","onClick","copy","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","App","userid","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"0SA+BeA,E,kDAzBb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,IAAG,GAHW,E,qDAOd,OACE,yBAAKC,UAAY,cACf,6BACI,wBAAIC,MAAS,CAACC,MAAM,OAAOC,SAAS,GAAGC,WAAW,YAAlD,WAEJ,wBAAIH,MAAS,CAACI,MAAMC,OAAOC,cAC3B,yBAAKP,UAAY,SACf,kBAAC,IAAD,CAAMA,UAAY,YAAYQ,GAAK,WAC/B,kBAACC,EAAA,EAAD,CAAQT,UAAY,iBAAiBU,QAAQ,UAAUC,KAAK,MAA5D,gB,GAhBIC,IAAMC,W,mDCuDXC,E,kDApDb,WAAYjB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACTiB,SAAQ,EACRC,UAAU,GACVjB,IAAG,GALS,E,sDAShBkB,QAAQC,IAAI,a,sKAIRC,KAAKC,SAAS,CAACC,SAAQ,I,SACjBC,IAAMC,KAAK,uCAChBC,MAAK,SAAAC,GAAG,OAAE,EAAKL,SAAS,CAACJ,UAAUS,EAAIC,KAAKC,IAAIN,SAAQ,OACxDO,OAAM,SAAAC,GAAG,OAAEZ,QAAQC,IAAIW,M,OACxBC,aAAaC,QAAQ,SAASZ,KAAKrB,MAAMkB,W,qIAIzC,OAAGG,KAAKrB,MAAMuB,QAEV,yBAAKrB,UAAY,cACb,6BACI,wBAAIC,MAAS,CAACC,MAAM,OAAOC,SAAS,GAAGC,WAAW,YAAlD,WAEJ,wBAAIH,MAAS,CAACI,MAAMC,OAAOC,cAC3B,kBAAC,IAAD,CACAI,KAAM,GACNT,MAAO,UACPmB,QAASF,KAAKrB,MAAMuB,WAKxB,yBAAKrB,UAAY,cACb,6BACI,wBAAIC,MAAS,CAACC,MAAM,OAAOC,SAAS,GAAGC,WAAW,YAAlD,WAEJ,wBAAIH,MAAS,CAACI,MAAMC,OAAOC,cAC3B,wBAAIP,UAAY,QAAQC,MAAS,CAAC+B,UAAU,WAA5C,+CACI,kBAAC,IAAD,CAAQC,MAAOd,KAAKrB,MAAMkB,UAAWkB,QAAU,UAAUC,QAAU,YACvE,kBAAC,IAAD,CAAM3B,GAAK,OACX,kBAACC,EAAA,EAAD,CAAQT,UAAY,iBAAiBC,MAAS,CAACmC,UAAU,IAAK1B,QAAQ,UAAUC,KAAK,MAArF,e,GA7CKC,IAAMC,W,mECGrBwB,E,MAASC,GAAW,mCA6FXC,E,kDA1Fb,WAAY1C,GAAO,IAAD,8BAChB,cAAMA,IAiBT2C,YAAc,WACb,EAAKpB,SAAS,CAACqB,MAAK,KAnBF,EAsBpBC,YAAc,WACZ,EAAKtB,SAAS,CAACqB,MAAK,KArBlB,EAAK3C,MAAQ,CACXC,IAAG,EACH4C,SAAQ,EACRC,GAAG,GACHH,MAAK,GAEP,EAAKD,YAAc,EAAKA,YAAYK,KAAjB,gBACnB,EAAKH,YAAc,EAAKA,YAAYG,KAAjB,gBATH,E,8FAYJC,G,iEACZA,EAAEC,iBACFV,EAAOW,KAAK,gBAAgBlB,aAAamB,QAAQ,WACjDhC,QAAQC,IAAI,UACZ4B,EAAEI,YAAc,G,wQAWZb,EAAOW,KAAK,UAAUlB,aAAamB,QAAQ,W,SACrC3B,IAAM6B,IAAN,8CAAiDrB,aAAamB,QAAQ,YACrEzB,MAAK,SAACC,GAAD,OAAO,EAAKL,SAAS,CAACwB,GAAGnB,EAAIC,KAAK0B,UACvCxB,OAAM,SAAAC,GAAG,OAAI,EAAKT,SAAS,CAACuB,SAAQ,O,OAC3CrC,OAAO+C,iBAAiB,SAAUlC,KAAKmC,UACvCjB,EAAOkB,GAAG,MAAV,sBAAgB,sBAAAC,EAAA,sEACRlC,IAAM6B,IAAN,8CAAiDrB,aAAamB,QAAQ,YACvEzB,MAAK,SAACC,GAAD,OAAO,EAAKL,SAAS,CAACwB,GAAGnB,EAAIC,KAAK0B,UAF9B,4C,mJAOpB9C,OAAOmD,oBAAoB,SAAUtC,KAAKmC,Y,+BAGnC,IAAD,OACN,OAAGnC,KAAKrB,MAAM6C,QAER,yBAAK3C,UAAY,QACf,yBAAKA,UAAY,UACb,6BACI,wBAAIC,MAAS,CAACC,MAAM,OAAOC,SAAS,GAAGC,WAAW,YAAlD,WAEJ,kBAACsD,EAAA,EAAD,CACIC,QAAQ,QACRC,UAAU,SACVC,QACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAQC,QAAT,KACE,kBAAC,IAAD,CAAQ9B,MAAOH,aAAamB,QAAQ,UAAWtC,KAAQ,IAAKuB,QAAU,UAAUC,QAAU,eAKhG,kBAAC1B,EAAA,EAAD,CAAQC,QAAQ,UAAUT,MAAS,CAAC+D,gBAAgB,UAAU9D,MAAM,OAAQ+D,YAAY,YAAxF,YAGR,wBAAIhE,MAAS,CAACI,MAAMC,OAAOC,cAC3B,yBAAKP,UAAY,QACZmB,KAAKrB,MAAM8C,GAAGsB,MAAM,GAAGC,UAAUC,KAAI,SAACC,EAAEC,GAAH,OACpC,6BACE,yBAAKtE,UAAU,OAAOuE,QAAW,WAAKC,IAAKH,GAAG,EAAK7B,gBACjD,2BAAI6B,SAKd,kBAACI,EAAA,EAAD,CACJC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdnC,KAAMtB,KAAKrB,MAAM2C,KACjBoC,iBAAkB,IAClBC,QAAS3D,KAAKuB,YACdqC,QAAQ,iBAIA,kBAAC,IAAD,CAAUvE,GAAI,U,GAvFLI,IAAMC,WCoChBmE,E,kDAnCb,WAAYnF,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXmF,QAAO,GAHO,E,gLAUJ,QADNA,EAASnD,aAAamB,QAAQ,YAElC9B,KAAKC,SAAS,CAAC6D,W,qIAIjB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,KAClB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAO,WACZ,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAO,OACZ,kBAAC,EAAD,c,GA3BIvE,IAAMC,WCAJuE,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdrE,OAAM,SAAAsE,GACLjF,QAAQiF,MAAMA,EAAMnB,a","file":"static/js/main.7a474943.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport {Link,Redirect} from 'react-router-dom';\r\nimport {Button} from 'react-bootstrap'\r\n\r\nclass Start extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      id:false\r\n    }\r\n  }\r\n  render(){\r\n      return(\r\n        <div className = \"App-header\">\r\n          <div>\r\n              <h1 style = {{color:'#fff',fontSize:40,fontFamily:'Courier'}}>Ctrl-C</h1>\r\n          </div>\r\n          <hr style = {{width:window.innerWidth}}/>\r\n          <div className = \"Start\">\r\n            <Link className = \"startlink\" to = '/qrcode'>\r\n                <Button className = \"button button2\" variant=\"primary\" size=\"lg\">\r\n                  Start\r\n                </Button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Start;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport axios from 'axios';\r\nimport {Link,Redirect} from 'react-router-dom'\r\nimport GridLoader from \"react-spinners/GridLoader\";\r\nimport QRCode from \"react-qr-code\";\r\nimport {Button} from 'react-bootstrap'\r\nclass QrCode extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        pressed:false,\r\n        sessionId:'',\r\n        id:false\r\n    }\r\n  }\r\n  clicked(){\r\n    console.log('Clicked')\r\n  }\r\n\r\nasync  componentDidMount(){\r\n        this.setState({loading:true})\r\n        await axios.post('https://ctrl-c-b.herokuapp.com/user')\r\n        .then(res=>this.setState({sessionId:res.data._id,loading:false}))\r\n        .catch(err=>console.log(err))\r\n        localStorage.setItem('userId',this.state.sessionId)\r\n  }\r\n\r\n  render(){\r\n        if(this.state.loading)\r\n            return(\r\n            <div className = \"App-header\">\r\n                <div>\r\n                    <h1 style = {{color:'#fff',fontSize:40,fontFamily:'Courier'}}>Ctrl-C</h1>\r\n                </div>\r\n                <hr style = {{width:window.innerWidth}}/>\r\n                <GridLoader\r\n                size={70}\r\n                color={\"#379683\"}\r\n                loading={this.state.loading}\r\n                />\r\n            </div>\r\n            )\r\n        else return(\r\n            <div className = \"App-header\">\r\n                <div>\r\n                    <h1 style = {{color:'#fff',fontSize:40,fontFamily:'Courier'}}>Ctrl-C</h1>\r\n                </div>\r\n                <hr style = {{width:window.innerWidth}}/>\r\n                <h2 className = \"Instr\" style = {{textAlign:\"center\"}}>Scan QR using Android Client and press Next</h2>\r\n                    <QRCode value={this.state.sessionId} bgColor = '#022140' fgColor = \"#379683\" />\r\n                <Link to = '/ct'>\r\n                <Button className = \"button button2\" style = {{marginTop:10}} variant=\"primary\" size=\"lg\">\r\n                  Start\r\n                </Button></Link>\r\n            </div>\r\n        )\r\n  }\r\n}\r\n\r\nexport default QrCode;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport GridLoader from \"react-spinners/GridLoader\";\r\nimport QRCode from \"react-qr-code\";\r\nimport axios from 'axios';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {OverlayTrigger,Popover,Button} from 'react-bootstrap'\r\nimport copy from 'copy-to-clipboard';\r\nimport openSocket from 'socket.io-client';\r\nconst socket = openSocket('https://ctrl-c-b.herokuapp.com/')\r\n\r\nclass CopiedText extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      id:false,\r\n      session:true,\r\n      ct:[],\r\n      open:false\r\n    }\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.handleClose = this.handleClose.bind(this)\r\n  }\r\n\r\n async onUnload(e){ // the method that will be used for both add and remove event\r\n    e.preventDefault();\r\n    socket.emit('window_closed',localStorage.getItem('userId'))\r\n    console.log('Closed')\r\n    e.returnValue = '';\r\n }\r\n handleClick = () => {\r\n  this.setState({open:true})\r\n};\r\n\r\nhandleClose = () => {\r\n  this.setState({open:false})\r\n};\r\n\r\nasync componentDidMount(){\r\n        socket.emit('newUser',localStorage.getItem('userId'))\r\n        await axios.get(`https://ctrl-c-b.herokuapp.com/user/${localStorage.getItem('userId')}`)\r\n              .then((res)=>this.setState({ct:res.data.text}))\r\n              .catch(err => this.setState({session:false}))\r\n        window.addEventListener(\"unload\", this.onUnload);\r\n        socket.on('new',async ()=>{\r\n          await axios.get(`https://ctrl-c-b.herokuapp.com/user/${localStorage.getItem('userId')}`)\r\n              .then((res)=>this.setState({ct:res.data.text}))\r\n        })\r\n  } \r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"unload\", this.onUnload);\r\n  }\r\n\r\n  render(){\r\n    if(this.state.session)\r\n      return(\r\n          <div className = \"main\">\r\n            <div className = \"header\" >\r\n                <div>\r\n                    <h1 style = {{color:'#fff',fontSize:40,fontFamily:'Courier'}}>Ctrl-C</h1>\r\n                </div>\r\n                <OverlayTrigger\r\n                    trigger=\"click\"\r\n                    placement=\"bottom\"\r\n                    overlay={\r\n                      <Popover>\r\n                        <Popover.Content>\r\n                          <QRCode value={localStorage.getItem('userId')} size = {200} bgColor = '#022140' fgColor = \"#379683\" />\r\n                        </Popover.Content>\r\n                      </Popover>\r\n                    }\r\n                  >\r\n                    <Button variant=\"primary\" style = {{backgroundColor:'#022140',color:'#fff' ,borderColor:'#379683'}}>QrCode</Button>\r\n                  </OverlayTrigger>\r\n            </div>\r\n            <hr style = {{width:window.innerWidth}}/>\r\n            <div className = \"body\">\r\n                {this.state.ct.slice(0).reverse().map((p,index)=>(\r\n                  <div>\r\n                    <div className=\"info\" onClick = {()=>{copy(p);this.handleClick()}}>\r\n                      <p>{p}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n            <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        open={this.state.open}\r\n        autoHideDuration={1000}\r\n        onClose={this.handleClose}\r\n        message=\"Text Copied\"\r\n      />\r\n          </div>\r\n      )\r\n    else return(<Redirect to ='/'/>)\r\n  }\r\n}\r\n\r\nexport default CopiedText;\r\n","import React from 'react';\nimport './App.css';\nimport Start from './components/start'\nimport QrCode from './components/qrcode'\nimport CopiedText from './components/ct'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userid:false\n    }\n  }\n\n\nasync componentDidMount(){\n    const userid = localStorage.getItem('userId');\n    if(userid!==null)\n      this.setState({userid})\n  }\n\n  render(){\n    return(\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path = \"/\">\n              <Start/>\n            </Route>\n            <Route path = \"/qrcode\">\n              <QrCode/>\n            </Route>\n            <Route path = \"/ct\">\n              <CopiedText/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}